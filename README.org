* Development Environment

This project configures Emacs and it's local environment to do great
work. It focuses on *flow* as a key state for the user to be in, so we
keep it minimal. This included removing things that are assumed to be
necessary e.g LSPs, linting and syntax highlighting.

You may argue that linting for example helps catch errors early but
this is akin to correcting spelling mistakes while you are trying to
write, it is distracting from the content you are trying to create.

That's the theory anyway, enjoy!

** Getting Started

- Make sure you have Emacs 30.1 or later. ~brew install --cask emacs~ or use your favoured linux package manager.
- Git clone this repo to your .emacs.d (assuming it doesn't exist) ~git clone https://github.com/mikepjb/emacs.d.git ~~/.emacs.d~
#+begin_src bash
    go install github.com/traefik/yaegi/cmd/yaegi@latest
    ./setup.sh # installs major-modes etc + paredit
    sudo pacman -S pg_format
    brew install pg_format
    brew install universal-ctags
    brew link --overwrite universal-ctags
#+end_src

** Usage
*** Clojure
- Use ~clojure.repl/fn~ for ~doc~ ~source~ ~find-doc~ and ~apropos~ functions.
*** Useful Default Keybindings
- ~C-x C-;~ comment line/region (also uncomments)
- ~C-c C-t~ for inserting TODO
*** Introspection
- ~C-h b~ is a lesser known help map to describe all bindings available in the active buffer.
- ~C-u C-x =~ gives detailed information about the display of the text at your cursor position. This is useful to determine what font-lock/syntax highlighting is used.
*** Editing
- ~M-i~ will manually indent, sometimes useful for multiline SQL strings in code etc.
- ~C-x TAB~ will interactively manually indent (incl. regions!)
*** File/Project Navigation
- Stick with the basics, fuzzy search with ~project.el~ and ~ripgrep~.
*** Version Control
- This setup uses vc > magit in an effort to keep things stripped down and simple.
- Common path is to mark OR register files (this adds them in ~git~)
- Useful commands:
  - ~vc-dir-root~ bound to: ~C-c g~ opens up a status window about the current state of your branch.
    - In there you can mark/unmark files with ~m/u~ or mark all ~M~.
    - ~+~ will run ~vc-pull~ to pull down new changes on the branch.
    - ~=~ will perform ~vc-diff~ to show a diff for the current file which you can close with ~q~.
    - ~D~ performs ~vc-root-diff~ to show ALL changes at once.
    - ~P~ performs ~vc-push~ to push your changes.
    - ~i~ will register a file, which adds files that were previously unknown to git/vc to the commit.
    - ~L~ shows the git log history summarised as one line per commit.
    - ~b c~ creates a new branch, while ~b s~ switches to another branch. ~b l~ shows the commits for a given branch.
    - ~v~ performs the next logical action, if you have added/registered updates then this will be a ~git commit~.
    - ~g~ refreshes the state from version control (git) like most Emacs modes do (e.g ~dired~).
    - ~d~ will delete or "clean" marked files or the file under the cursor.
    - ~x~ will hide up to date files, if you commit but haven't pushed.
    - ~RET~ enters the file under cursor (but not ~C-j~).
    - ~vc-create-tag~ will. create a git tag.
    - ~C-x v u~ will run ~vc-revert~ to clear changes.
- ~vc~'s commands are run in a non-interactive way, so you can't enter your SSH passphrase directly and either have to use ssh-askpass or have a key without a password.
- ~C-c C-k~ (not ~C-x k~) will kill + cancel a commit, which will also clear up other temporary buffers.

*** Org Mode
- ~C-c '~ will open a code block in another buffer for you to edit in it's native major mode.

** Elisp Documentation

- setq-default is needed to set buffer local variables e.g compilation-scroll-output

** .dir-locals.el

- Have directory local variables is awesome for project setup, here I'm configuring two postgres servers (one of them using env vars where I care about hiding the credentials).

#+begin_src emacs-lisp
    ;;; Directory Local Variables
    ;;; For more information see (info "(emacs) Directory Variables")
    ;;; The (sql-server "") definitions are necessary to avoid prompts when connecting.

((nil . ((eval . (setq sql-connection-alist ;; Connection configurations
                       `(("local-dev"
                          (sql-product 'postgres)
    			  (sql-user "postgres")
    			  (sql-server "") 
    			  (sql-database "postgresql://postgres:<pass>@127.0.0.1/<database>?sslmode=disable"))
                         ("staging-postgres"
                          (sql-product 'postgres)
    			  (sql-user "postgres")
    			  (sql-server "") 
                          (sql-database ,(format "postgresql://postgres:%s@%s/<database>?sslmode=disable"
    						 (getenv "PROJECT_DB_PASS")
    						 (getenv "PROJECT_DB_HOST"))))
  			 ("mysql-example"
                          (sql-product 'mysql)
  			  (sql-user "myuser")
  			  (sql-password "") ;; using iam auth
  			  (sql-port 3306)
  			  (sql-server "127.0.0.1") 
  			  (sql-database "mydatabase")
  			  (sql-mysql-options '("--protocol=tcp")))))))))
#+end_src

* Exclusions

- No SQL formatting, I like this but it's too tailor-mode of something that is relatively rare for you.
